var  rsetprop = func(p,v,mn,mx){
    if (mn != nil and v < mn)
        v = mn;
    if (mx != nil and  v > mx)
        v = mx;
    setprop(p,v);
};
var updateVolumeTimer = maketimer(0.1, func
{
    print("calc sound",getprop("/sim/time/gmt"));
    if(getprop("sim/current-view/internal"))
        setprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume",
                0.2
                + getprop("canopy/position-norm")-getprop("fdm/jsbsim/systems/ecs/pilot-helmet-volume-attenuation"));
    else
        setprop("systems/sound/cockpit-adjusted-external-volume",1);


    rsetprop("fdm/jsbsim/systems/sound/cockpit-effects-volume", 
             0.3
             - getprop("fdm/jsbsim/systems/ecs/pilot-helmet-volume-attenuation"),0,1);

    rsetprop("fdm/jsbsim/systems/sound/engine-jet-intake-l-volume",
             0.0133
             * getprop("engines/engine[0]/n2")
             * getprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume"),nil,1);

    rsetprop("fdm/jsbsim/systems/sound/engine-jet-intake-r-volume",
             0.0133
             * getprop("engines/engine[1]/n2")
             * getprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume"),nil,1);

    rsetprop("fdm/jsbsim/systems/sound/engine-n2-l-volume",
             0.015
             * getprop("engines/engine[0]/n2")
             * getprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume"),nil,0.4);
    rsetprop("fdm/jsbsim/systems/sound/engine-n2-r-volume",
             0.015
             * getprop("engines/engine[1]/n2")
             * getprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume"),nil,0.4);

    rsetprop("fdm/jsbsim/systems/sound/engine-jet-exhaust-l-volume",
             0.2
             * (getprop("engines/engine[0]/PB")-1)
             * getprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume"),nil,0.6);

    rsetprop("fdm/jsbsim/systems/sound/engine-jet-exhaust-r-volume",
             0.2
             * (getprop("engines/engine[1]/PB")-1)
             * getprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume"),nil,0.6);

    rsetprop("fdm/jsbsim/systems/sound/engine-efflux-l-volume",
             0.1
             *(getprop("engines/engine[0]/PB")-1)
             * getprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume"), nil, 0.4);

    rsetprop("fdm/jsbsim/systems/sound/engine-efflux-r-volume",
             0.1
             *(getprop("engines/engine[1]/PB")-1)
             *getprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume"),nil,0.4);

    rsetprop("fdm/jsbsim/systems/sound/engine-jet-augmentation-l-volume",
             0.06*getprop("engines/engine[0]/afterburner")
             *getprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume"),nil,0.4);

    rsetprop("fdm/jsbsim/systems/sound/engine-jet-augmentation-r-volume",
             0.06
             * getprop("engines/engine[1]/afterburner")
             * getprop("fdm/jsbsim/systems/sound/cockpit-adjusted-external-volume"),nil,0.4);
});

updateVolumeTimer.start();
